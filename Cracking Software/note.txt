Burp Suite
deep freeze
https://www.softwaretestinghelp.com/remote-access-software/



https://ikrima.dev/dev-notes/assembly/asm-cheatsheet/
https://trungkmare.wordpress.com/2018/05/31/bang-lenh-nhay-trong-assembly/

https://www.asciitable.com/
msdn = Microsoft Developer Network

- blog cach thuc reverser engineering
	+ https://0xdf.gitlab.io/
	+ reverser engineering dll thread
		+ https://www.codereversing.com/archives/653#respond

- anti debug
	+ https://anti-debug.checkpoint.com/


- list plugin IDA
	+ https://mavlevin.com/2019/05/24/Vulnerability-Research-Tools.html
	+ https://github.com/onethawt/idaplugins-list


- tricks and tips reverse engineering
	+ https://mavlevin.com/2020/05/01/Mav-27s-30-Reverse-Engineering-Tips-26-Tricks.html
	+ best way set BP
		+ https://www.youtube.com/watch?v=Tc8Wl37uwYc&t=1078s
	+ đôi khi ta sẽ gặp các hex đặc biệt và éo biết nó là gì thì nó có thể là nơi gọi module vv.... nên xem video
		+ kiểu xác định func được gọi
		+ xác định hàm gì được gọi, tính toán làm sao để biết , vv
		+ https://www.youtube.com/watch?v=zb_JPYTvdAs&list=PLrl8Ub_E3P_UNRuZ5M2_rjjfzjNiLI4Hu&index=7
	+ Find Encryption
		+ https://www.youtube.com/watch?v=rZ6hJcJUN88&t=446s
	+ reverser engineering decryption
		+ https://www.youtube.com/watch?v=l2P5CMH9TE0
	+ find string
		+ https://reverseengineering.stackexchange.com/questions/2796/find-a-string-that-i-entered-in-ollydbg

- beginner reverse engineering
	+ hieu ve offset cach local bien declare vv, basic ida
		+ https://www.youtube.com/watch?v=dBGwa13vBXs
		+ https://www.youtube.com/watch?v=ks6csfpTRCE&list=PL7YjNn4bTOJqwhUxB6ZZguNkHDy1s2fpn
	+ https://www.youtube.com/watch?v=vxNzPvpiICk
		+ shortcut ida
	+ https://www.youtube.com/watch?v=lFxL1VPOB2U
	+ https://www.youtube.com/watch?v=qCQRKLaz2nQ

- hack game huong dan
	+ https://gamehacking.academy/pages/3/04/


------------------------------------------- DLL file
- how to pass parameters to function in dll using rundll32.exe
	+ https://stmxcsr.com/micro/rundll-parse-args.html
- trick
	+ https://blog.securitybreak.io/reverse-engineering-tip-analyzing-a-dll-in-x64dbg-b3005d516049


-------------------------------------------- fix error
- lỗi ida và x64dbg không giống address
	+ https://reverseengineering.stackexchange.com/questions/22494/how-to-use-memory-address-information-from-idafree-to-set-a-breakpoint-in-x32dbg
	+ https://www.youtube.com/watch?v=DGX7oZvdmT0
		+ chỉ giải thích , dùng cách trên khỏe


--------------------------------------------- script python for ida
- Convert large amount of code to data in IDA
	+ https://stackoverflow.com/questions/14492911/convert-large-amount-of-code-to-data-in-ida


- Reverse Engineering Network Protocols
	+ WINHTTP.DLL
		+ http request
	+ ws2_32.dll
		+ socket
	+ wsock32
		+ socket , older version.
		+ recv func

	+ https://www.youtube.com/watch?v=vxNzPvpiICk




- stack frame
	push rbp
	mov rbp,rsp

	////////////////////////function
	call ptr [address]
	push rbp
	mov rbp,rsp
	...
	push rsp,rbp	
	pop rbp
	ret

	push rsp,rbp
	pop rbp		// 32 bit se dung ebp
	ret

- detect main func, exe c++
	start entrypoint va di xuong, co dang nhu sau
	mov r8, rdi
	mov rdx, rbx
	mov ecx, dword ptr ds:[rax]
	call ......
		+ https://www.youtube.com/watch?v=tWSa1L5L394

- argument for 64bit
	+ https://learn.microsoft.com/en-us/cpp/build/x64-calling-convention?view=msvc-170
	func1(int a, int b, int c, int d, int e, int f);
	// a in RCX, b in RDX, c in R8, d in R9, f then e pushed on stack




- call ds:[<&system>]
	+ it is common for console application to use system call to clear screen (cls)
- std:basic_ostream
	+ input
- <&exit>
	+ exit func
- <&strlen>
	+ lengh of string
- <&memcmp>
	+ https://cplusplus.com/reference/cstring/memcmp/
	+ VD:
		- int memcmp ( const void * ptr1, const void * ptr2, size_t num );
		- ptr1
			+ Pointer to block of memory
			+ địa chỉ của bộ nhớ
- ReadFile window API
	+ dữ liệu của file sẽ được lưu ở địa tri với biến lpNumberOfBytesRead
	+ nNumberOfBytesToRead : The maximum number of bytes to be read.





instructions
- https://www.felixcloutier.com/x86/
	+ tong hop cac lenh
- test
	+ https://reverseengineering.stackexchange.com/questions/15184/what-does-the-test-instruction-do
- sbb
	+ https://stackoverflow.com/questions/41031912/x86-sbb-with-same-register-as-first-and-second-operand
- shr
	+ https://stackoverflow.com/questions/24477132/what-does-shr-on-asm-mean
- xorps
	+ https://stackoverflow.com/questions/35103741/what-is-the-purpose-of-xorps-on-the-same-register
- CMOVcc (cmova is CMOVcc instruction)
	+ https://stackoverflow.com/questions/30150274/purpose-of-cmove-instruction-in-x86-assembly
- cmove
	+ di chuyen neu bang, dựa vào điều kiện thỏa mãn, same cmovcc, cmova
	+ https://www.felixcloutier.com/x86/cmovcc
- cmp + jnz
	+ https://stackoverflow.com/questions/45898438/understanding-cmp-instruction


	


crack password
- mô phỏng compare method thường dùng 
	+ so sánh chiều dài của chuỗi nhập
		+ nó so sánh từng giá trị (loop)
		+ nó thay đổi signed đến unsigned
		+ nó dùng hàm so sánh memory
			+ https://cplusplus.com/reference/cstring/memcmp/
	+ reversing logic
		+ chúng ta có thể bypass encryption


- mô tả cách tôi tìm ra nơi crack fences5
	+ đầu tiền tôi đặt các bp vào các class để tìm ra nơi nó check key
	+ tôi tìm thấy nó import A.dll file và gửi dữ liệu chạy hàm ở A.dll
	+ tìm ra parameter chạy A.dll file
	+ run and debug with x32dbg
	+ win game ez




- tín hiệu ta đang debug đúng nơi là có nhiều jump và register thường là các thanh ghi tính toán eax ebx,esi .....
- thường thì đường đi ngắn nhất là sai
- khi đã crack chúng ta phãi đổi tên file về như củ vì có khả năng sẽ sinh lỗi vì các chức năng cần check name file để sử dụng :V trick lừa mấy ông debugger
- trick để trả về đúng giá trị là thay cả func đó với lệnh ta cần
	+ VD:   call 0x11412
		cmp eax,1
		je 0x11111
	+ ta cần eax = 1 và gọi hàm phãi trả về 1, thì ta chỉ cần sử cái hàm đấy  trả về 1 
		mov eax,1
		ret
		+ điều này giúp ta bypass mọi nơi mỗi khi call hàm này để check nó đều trả về 1
- trick xử lý crack
	+ nếu so sánh là ở bộ nhớ chúng ta nên vào hàm và xem giá trị nào thay đổi bộ nhớ đấy
		+ vì các giá trị dưỡi sẽ trích xuất dữ liệu từ bộ nhớ ra so sánh nên ta phãi vào hàm coi kĩ và sửa giá trị sao cho hợp lý
	+ nêu so sánh nhảy là thanh ghi với thanh ghi và số thì chúng ta sẽ kiếm hàm thay đổi trả về giá trị hoặc sửa jmp luôn cũng dc, đôi khi chúng ta vẫn nên kiểm tra vì kiểu j đoạn sau có thể check lại thanh ghi
- đôi khi programer sẽ lừa vì ta luôn theo dõi eax và cách để tránh bị lừa
	+ 204 expire trial method
	- thông thường crc check nó sẽ set giá trị ax ve 0x1
	+ nêu ax = 0x1 mà không nhảy đúng hướng thì chắc chắn là lệnh lừa 

- Cyclic Redundancy Check thường viết tắt là CRC, là thuật ngữ tiếng Anh trong kỹ thuật số, là phương pháp kiểm tra và phát hiện lỗi, được sử dụng trong các mạng số và thiết bị lưu trữ để phát hiện sự thay đổi tình cờ đối với dữ liệu được truyền đi hay lưu trữ.
	+ khi ta sửa dữ liệu và khiến trigger crc, nó sẽ dẫn ta tới bad message,  thông thường thì đây đc gọi là anti tamper protect
	+ bypass nó thì cứ jmp nó là dc :V tránh báo lỗi của nó thôi


mô phỏng crack
	- dung http analysis xem có action online không 
	- dùng api monitor xem có đọc file key không
		+ dựa vào việc này ta có thể method search string và tìm tới gần hơn nơi ta crack
		+ vd: tạo key file rồi khiến file đó confirmed là bypass
	- nếu các bước trên không có ta sẽ dùng các method khác để crack
	- nếu có ta theo dõi nhánh, comment, follow eax, global variable, hàm window api để crack thành công


mô phỏng
- để crack clear (crack toàn bộ mà k phãi từng phần) chúng ta phãi tìm cái register khiến chúng ta có bad message và sau đó tìm các lệnh khiến cho register đó thay đổi
	023 cracking mr bills  - (important)
- thông thường programer sẽ
	check format -> check value


- mổ ta deep crack
	+ họ sẽ tạo 1 hoặc nhiều func check và dùng lại nhiều lần
	+ nếu chúng ta crack surface thì chúng ta chỉ thay đổi giá trị check và dẫn dắt tới good message nhưng nêu chúng ta muốn deep crack chúng ta phãi đi qua phần check của nó và xem, khi chúng ta sửa thành công thì chúng ta sẽ crack toàn bộ mà không cần sửa các chức năng khác






























qword 8 bytes
dword 4 bytes
word 2 bytes


- mov dword ptr ds:["memory address"], eax
ds = data segment
ss = stack segment	(no goi o phan stack)
cs

Code – The segment where actual code is stored and is represented by the .text section. It mainly contains assembly language instructions and can not be expanded once program execution begins.

Data – Represented by the .data and .bss sections, it is used to declare global and local variables. It remains static throughout the program.

Stack – In this memory segment, data may be initialized at run-time. It acts as temporary storage and follows the Last In First Out protocol, which means that elements are only added or removed from the top.



- flags
	+ https://viblo.asia/p/toi-da-hoc-assembly-32bit-nhu-the-nao-phan-2-1Je5EmDG5nL
- ZF (zero flag)
	ZF = 1 khi kết quả tính toán = 0 hoặc phép so sánh bằng nhau
	ZF = 0 khi kết quả tính toán non-zero hoặc phép so sánh khác nhau
- CF (carry flag)
	https://viblo.asia/p/toi-da-hoc-assembly-32bit-nhu-the-nao-phan-2-1Je5EmDG5nL
- SF (sign flag)
	nó lấy bit đầu tiên của kết quả để biết được nó âm hay dương
	SF = 0 mean positive
	SF = 1 mean negative
- OF (overflow flag)
	OF = 1 khi kết quả của phép toán có dấu lớn hơn so với kích thước của địa chỉ đích hoặc phép tính sai
- DF (direction flag)
	this flag controls whether the string address increase or decrease after each string instruction
	DF = 0 mean EDI address increases after each string operation
	DF = 1 mean EDI address decreases after each string operation
	CLD will clear the DF flag (DF = 0)
	STD will set the DF flag (DF = 1)
	default DF = 0

- chúng ta nhìn vào CF và OF khi
	+ nếu chương trình dùng Unsigned Numbers thì ta tập trung vào CF flag
	+ nếu chương trình dùng Signed numbers thì ta tập trung vào OF flag
- Signed vs Unsigned Numbers
	+ https://www.cs.uaf.edu/2008/fall/cs301/lecture/10_17_signed_unsigned.html




RAX	Accumulator; Used for input/output, arithmetic,and return values from functions
RBX	Base; Used for indexed addressing (using one register as base and other as index)
RCX	Count; Stores loop count variables in iterative operations
RDX	Data; Input/output, sometimes extends RAX for multiply/divide
RSP	Stack Pointer; Stores current position within the stack
RBP	Base Pointer; Helps in referencing parameter and other stack variables as offsets from the "base" of the stack
RSI	Used as a source index for string operations
RDI	Used as a destination index for string operations
RIP	Stores next instruction to be executed

R8-R15	x64 general purpose registers







method crack
- set BP on strings
	+ keyword for search
		+ LICENSE
		+ REGISTER
		+ activate
		+ check
- set BP on intermodular calls
	+ tìm các fx api window trong dự án
- set BP from call stack
	+ isDebuggerPresent bypass, attach software is running
	+ symbols -> name.exe (đưa đến entr point) -> run -> nhấn nhập key và hiện thông báo lỗi -> pause -> call stack -> user module cai hiện thông báo lỗi -> execute till return -> nếu là system module thì ta bấm run to user code || user module thì t check func(end) -> nhấn ok thông báo lỗi -> check func (end)
		- mục đích của việc này là để bắt đc con trỏ lệnh đang chạy ở đâu
		- ví dụ khi ta chạy run hiển thị giao diện ứng dụng ---> bấm vào nhập key thì lệnh sẽ chạy tới nhập key ---> khi ta nhập key và ok thì lệnh nó chạy tới thông báo , việc ta thược hiện thao tác till to return nhằm chạy tới nơi mà giao diện đang hiển thị và thực hiện run to user code tới nơi mà người dùng bấm để đi tiếp.
	+
		+ khi ta dùng call stack mà nhiều hàm chạy thì ta check từng cái
		+ nếu nó vừa chạy qua getmessage thì sai vì software nó thông báo lỗi khi nhập key nên k có vụ mới chạy nhận được
		+ nếu hàm thông báo nó lại show trước khi chạy nhánh là sai vì k có nhận sao lại thông báo mà còn chạy chia nhánh
		+ trước tiên là tick hết các mục rồi chạy lại cho nhanh
- call stack xref method
	+ coi 048 call stack xref method cps
	+ show nơi gọi hàm này
- waitMessage API method 
	+ 079 WaitMessage API	CSP
	+ 082 onion method - chuan hon cai 79
	+ waitmessage api la phản hồi cho việc chờ người dùng tương tác vơi window, vd: click button
	+ hình như chỉ sử lí nag screen hoặc cho việc loop check sự kiên ....
	+ chủ yêu dùng để remove nag screen nơi có chức năng load khiến gây vấn đề khi debug chắc vậy
	+ chức năng này giúp ta đi từ layer đầu đến layer 2 ... rồi  tới nơi t cân crack, khi ta tới nơi có nhiều code nhất trong func, có nhiều func lồng , nhiều string khả năng là cái ta cần crack
- onion method = coming out of the inner calls layer by layer
	+ func trong func
	+ chung ta can di ra khoi func hien tại để tới thằng cha
		+ 1 là dùng xref để coi những thằng gọi hàm này
		+ 2 là chạy ra khỏi func, run until return.
- baseline trace = to see default path
	+ thuật ngữ theo theo dõi dấu vết cơ bản 
	+ trace record
- message breakpoint method
	+ xử lý sự kiện click
	+ vd: khi chúng ta click vào nút ok


- new method, crack tu viec check software lưu key và đọc key dung api monitor
	+ https://medium.com/techzap/dll-hijacking-part-1-basics-b6dfb8260cf1
		+ trick dung monitor or procmon
	+ theo dõi no đọc key ở file nào, ta tìm cach crack khiến key confirm
	+ se crack all chuc nang khi dung ki thuat nay
	+ 164 tracing key file
	+ 184 GetPrivateProfileString API
	+ 186 TracingGlobalVariables
- lam the nao de phan tich deep debug
	+ 172 using exceptions to locate patch - chuan 
	+ 186 TracingGlobalVariables
- diff tracing method
	+ khi trials cho dùng full chức năng nhưng có giới hạn ta có thể dùng method này để crack
		+ 187 diff tracing and GetSystemTimeAsFileTimeAPI
			+ GetSystemTimeAsFileTimeAPI : api này giúp ta xác định thời gian vì vậy khi SW lấy thời gian nó sẽ dựa trên api này 
		+ đây là api theo dĩu tune hệ thống thay đổi nó và đồng thời crack full thời gian dùng trials
		
- 189 comment tracing method
	+ cẩn thận các giá trị global khi crack nhánh
- unpack 
	+ 137 pushebp unpacking method - unpack upx method 1
		- dùng trường hợp này khi bạn muốn dump exe file và crack nó
		- nếu chúng ta cứ cưỡng chế crack mà không dump thì nó sẽ tạo junk code ( code rác ) vì nó chưa unpack
	+ 139 virtualalloc virtualprotect unpacking method - unpacking method method 2
		- dùng khi bạn muốn dung cheat engine để crack, nó giúp tìm đc nơi đã unpack và ta có thể đặt bp ở đó để crack, cụ thể là virtualalloc nó sẽ cấp bộ nhớ và thằng virtualprotect sẽ cấp quyền việc dùng  method này giúp ta lấy được nơi unpack và thao tác với nó. không cần dump exe file và có thể dùng cheat engine để crack

- memory patchers allow you to bypass software protection by letting the packed program unpack itself into memory then we patch the memory (dung cheat engine, python, ...)
	
- handles method
	+ 136 prevent force close
luu y, mau chot de crack any software du kho kieu loz j di nua
Every windows message (events) goes into a message loop that contains two functions:
TranslateMessage()
	https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-translatemessage
DispatchMessage()
	https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-dispatchmessage
	+ DispatchMessage() sẽ gửi windowsmessage to the callback func
	+ sẽ gửi 1 windowmessage đến the callback func
window message
	+ https://learn.microsoft.com/en-us/windows/win32/learnwin32/window-messages




virtualalloc is api for allocating memory for writing. virtualprotect is api for changing a memory region to read, wirte or execute
- khi set BP virtualaloc khong lam viec thi nen dung cach nay
	+ https://www.youtube.com/watch?v=Tc8Wl37uwYc




- các cách protect software
	+ crackme 11 - Cracking Software Protection - (important) (CSL)
	+ crackme 11 - Cracking Software Protection - (important) (CSL)
	
	+ 062 bypass crc - (super important) multiple check (CSP)
	+ 089 bypassing anti tamper - trick dll file, anti tamper khong dung timer
	+ 098 bypassing server checks - same deep freeze, can ban la no tranh man hinh login
	+ 102 GetLocalTime API - bypass time 
	+ 128 isDebuggerPresent bypass install and crack - kha la ao coi ki
	+ 135 bypass anti tamper - new method co dung timer, phãi dùng internalmodular dùng settimer api để xử lý
	+ 151 process explorer and disabled buttons (CSP) - loadder
	+ 153 bypass loader protection - ************************* quang trong vcc (CSP)
	+ 158 bypassing turbo activate - bypass turboactivate.exe toi coi toi eo biet no bypass cho nao
	+ 223 bypassing vmprotect kernel level anti debug protection



- last chance exception on .... (C0000005,EXCEPTION_ACCESS_VIOLATION)
	+ không thể phục hồi sau khi dính lỗi này.
	+ chương trình bị crash và không biết những gì để làm, đại khái là bạn đã sửa sai giá trị khiến nó bị lỗi.
		+ điều này chứng tỏ rằng bạn đang patch sai nơi và phãi đi xâu hơn để tìm nơi cần patch


- api monitor
	- data access and storage --> local file systems --> file management --> kernel32.dll
		+ CreateFileA, CreateFileW
	- System Services --> Windows System Infomation --> Registry --> advapi32.dll
		+ RegOpenKeyExA, RegOpenKeyExW




- lessons CSL
	+ 43 Setting Hardware BPs and doing memory patching
	- protected
		+ 52 Introduction to Software Protection
		+ 57 Intro to loaders
	- Anti Debugging
		+ 59 Introduction to Anti Debugging Protection
	- VBS
		+ 87 - 97	
	- .Net
		+ 107 - 129
- user code usually 0040000...
- operating system code usually 007000..
- address start with 7 thì chúng ta đang ở operating system memory address
	VD 743D6879 bắt đầu với 7
	đây là nơi chúng ta k cần xem
- tìm good message or bad message sau đó tìm hàm window gần nhất và đặt BP
- xor eax,eax
	lệnh này dùng để clear thanh ghi vì ta set eax về 0
- đầu tiền chúng ta tìm bad message 
	- sau đó ta theo dõi lệnh jump kiểm tra vì sao nó nhảy tới bad message
	- sau đó chúng ta nhìn vào eax xem nó bằng fffffff hay 00000000 ( con dua vao gia tri so sanh)
		- nếu là 00000000 thì kết quả đang đúng
		- nếu là ffffffff thì kết quả đang sai và chúng ta cần theo dõi eax phía trên để tìm tại sao nó lại ffffffff từ đó ta có thể sửa đổi giá trị hoặc tìm ra password để nhảy tới good message
			- khi ta tìm ra 1 func hay 1 sự so sánh thì ta có thể vào mà check và có thể extract password
			- nếu đó là func của window api ta cần check document để xem nó trả về cái gì và xử lý tiếp
			- 172 using exceptions to locate patch tham khao, phan tich deep debug





- lessons CSP
	+ VBS
		+ 6-7, 
	+ .Net
		+ 8-12, 106-112, 115-117, 122-126, 147-150, 197-201
		+ https://en.wikipedia.org/wiki/List_of_CIL_instructions
	+ C++
		+ 17-19
			+ tracing method, remove nag, set hardware BP on execution
				- khi ta f8 gặp lệnh chờ phản hồi nhưng không thể phản hồi đc vì cái đó là network thì ta dùng lệnh này để pass
				- hardware BP được dùng khi nó không ở user module
					+ vì ở module khac ví dụ mfc msdn foundation class library chúng ta set SW BP thi nó éo làm việc
		+ 28-29
			+ phần mềm check registered by registry
		+ 30-33
			+ call stack, message BP, tracing register, using resource hacker to remove nag, 
		+ 46-48
			+ xref method, call stack, tracing register
		+ 53-55
			+ bypass themida protector, search tring in memory, references search, search constant using resource hacker
		+ 59-62
			+ call stack, bypass crc ( check multiple times, throw error when we dont use debug),
		+ 63-65
			+ call stack, coder chơi mẹo lưu giá trị vào stack để check về sau
		+ 70-73.2
			+ setwindowtext api, call stack, search keyword (kieu liscense, registed ... tim ra func check key, roi crack nó)
		+ 77-79
			+ waitMessage API
		+ 80-86
			+ remove nag, trial, onion method, using resource hacker to remove watermark
			+ 86 - cẩn thận lỗi khi đặt BP kiểu đặt quá cao khiến k bắt đc popup mình cần
		+ 87-91
			+ ket hop cua skater protector trong .net va anti tamper in c++
			+ 090 registering the program - crack dll file , rat quang trong
			+ remove active button
		+ 92-95
			+ remove string by hxd, using vbdecompiler and xdbg
		+ 98, 120
			+ bypass server checks
		+ 100-102
			+ bypass expired trial nag, internalmodular
		+ 103-105
			+ unlimited trial, kill nag, call stack
		+ 113
			+ onion method, search string
		+ 118 (.rar)
			+ getlocaltime api, internalmodular
		+ 128 (IDM)
			+ onion method nhung phuong thuc la chay toi phan return thay vi tim bang xref (tim dia chi goi ham nay)
		+ 132-136
			+ bypass anti tamper by timer mdsn, register name memory address, bắt sự kiện click vào 1 nút.
		+ 137-144
			+ top 2 method unpack, fix import khi lỗi miss file dll khi dump file, using api monitor extract login data, onion method.

		+ loader
			+ 151-155
				+ enable button, bypass protection
		
		+ 156-160
			+ just activate func, no need bypass all func
		+ 161-165 (pdf)
			+ api monitor analysis, tracing key file, crack key file, edit name registed by hxd 
		+ 166-168
			+ data segment analysis
		+ 169-174 (bai nay phan tich chuan)
			+ call stack,save file tracing record, using exceptions to locate patch, export registry va tái sử dụng, 
		+ 176-179
			+ block server, expire trial, onion method, bypass crc check, handle method
		+ 180-183
			+ SetWindowPos api, resource hacker
		+ 184-186 (crack ngược từ keyfile, no check key file đầu tiên nên ta tìm và setup keyfile)
			+ GetPrivateProfileString API, xử lý key file, cẩn thận global variable,
		+ 187-189	(GetSystemTimeAsFileTimeAPI)
			+ crack expired
		+ 190-193 (goodsync)
			+ bypass account login, tracing file by api monitor, remove limit.
		+ 194-196
			+ crack register, call stack
		+ 202-207
			+ crack expired, bypass antitemper, bypass and hieu ve crc check, remove trials nag, crack function
		+ 208-212 (nitro pdf)
			+ resource hacker xoa title, call stack ket hop voi onion method, them tien to "~" vao file de ngan chay file, remove nag 
		







